import HTTPClient.NVPair
import net.grinder.script.GTest
import net.grinder.scriptengine.groovy.junit.GrinderRunner
import net.grinder.scriptengine.groovy.junit.annotation.BeforeProcess
import net.grinder.scriptengine.groovy.junit.annotation.BeforeThread
import org.apache.hc.core5.http.HttpHeaders
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import org.ngrinder.http.HTTPRequest
import org.ngrinder.http.HTTPRequestControl
import org.ngrinder.http.HTTPResponse
import org.ngrinder.http.cookie.Cookie
import org.ngrinder.http.cookie.CookieManager

import static net.grinder.script.Grinder.grinder
import static org.hamcrest.Matchers.is

// import static net.grinder.util.GrinderUtils.* // You can use this if you're using nGrinder after 3.2.3

import static org.junit.Assert.assertThat

/**
 * A simple example using the HTTP plugin that shows the retrieval of a single page via HTTP.
 *
 * This script is automatically generated by ngrinder.
 *
 * @author admin
 */
@RunWith(GrinderRunner)
class TestRunner {

    public static GTest test
    public static GTest test2
    public static HTTPRequest request
    // public static Map<String, String> headers = [:]
    public static NVPair[] headers = []
    public static NVPair[] params = []
    public static List<Cookie> cookies = []
    public static def LOCALHOST = "http://localhost:8080"
    public static def inputIp = System.getenv("ip")
    public static String destIp

    @BeforeProcess
    public static void beforeProcess() {
        HTTPRequestControl.setConnectionTimeout(300000)
        // ip 설정
        if (inputIp != null) {
            destIp = inputIp
        } else {
            destIp = LOCALHOST
        }

        test = new GTest(1, "GTest1")
        test2 = new GTest(2, "GTest2")

        request = new HTTPRequest()

        grinder.logger.info("before process.")
    }

    @BeforeThread
    public void beforeThread() {
        test.record(this, "test1")
        test2.record(this, "test2")

        grinder.statistics.delayReports = true
        grinder.logger.info("before thread.")
    }

    @Before
    public void before() {
        request.setHeaders(headers)
        CookieManager.addCookies(cookies)
        grinder.logger.info("before. init headers and cookies")
    }

    private NVPair[] headers() {
        return [
                new NVPair(HttpHeaders.CONTENT_TYPE, "application/x-www-form-urlencoded; charset=utf-8")
        ];
    }

    // 1. 로그인 페이지 이동
    @Test
    public void test1() {
        grinder.logger.info("1. 로그인 페이지 이동")
        def uri = "/auth/signin"

        HTTPResponse response = request.GET(destIp + uri, params)

        if (response.statusCode == 301 || response.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", response.statusCode)
        } else {
            assertThat(response.statusCode, is(200))
        }
    }

    // 2. 로그인
    @Test
    public void test2() {
        grinder.logger.info("2. 로그인 시작")
        // headers.put("Content-Type" , "application/x-www-form-urlencoded")

        List<NVPair> paramList = new ArrayList<>();
        paramList.add(new NVPair("email","test@gmail.com"));
        paramList.add(new NVPair("password","1111"));
        // params = paramList.toArray();
        params = [ new NVPair("email","test@gmail.com"), new NVPair("password","1111")]
        grinder.logger.info("headers() : {}", headers())
        grinder.logger.info("paramList : {}", paramList)
        grinder.logger.info("params : {}", params)

        HTTPResponse response = request.POST(destIp + "/auth/signin", params, headers())

        grinder.logger.info("getHeaders : {}", response.getHeaders())

        // 302 : / 로 리다이렉트면 성공
        if (response.statusCode == 302) {
            grinder.logger.info("login 성공. 리다이렉트 경로 = {}", response.getHeader(HttpHeaders.LOCATION).toString().substring(10))
            assertThat(response.getHeader(HttpHeaders.LOCATION).toString().substring(10), is(destIp + "/"))
            assertThat(response.statusCode, is(302))
        } else {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", response.statusCode)
        }
    }
}
